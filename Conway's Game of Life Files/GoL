"""
conway.py 
A simple Python/matplotlib implementation of Conway's Game of Life.
"""

import sys, argparse
import numpy as np
import matplotlib.pyplot as plt 
import matplotlib.animation as animation
from entities import *

ON = 255
OFF = 0
vals = [ON, OFF]

def randomGrid(N):
    """returns a grid of NxN random values"""
    return np.random.choice(vals, N*N, p=[0.2, 0.8]).reshape(N, N)

def addGlider(i, j, grid):
    """adds a glider with top left cell at (i, j)"""
    glider = np.array([[0,    0, 255], 
                       [255,  0, 255], 
                       [0,  255, 255]])
    grid[i:i+3, j:j+3] = glider

def update(frameNum, img, grid, N):
    # copy grid since we require 8 neighbors for calculation
    # and we go line by line 
    newGrid = grid.copy()
    # TODO: Implement the rules of Conway's Game of Life
    for i in range(N):
        for j in range(N):           
            total = int((grid[i, (j-1)%N] + grid[i, (j+1)%N] +
                         grid[(i-1)%N, j] + grid[(i+1)%N, j] +
                         grid[(i-1)%N, (j-1)%N] + grid[(i-1)%N, (j+1)%N] +
                         grid[(i+1)%N, (j-1)%N] + grid[(i+1)%N, (j+1)%N])/255)
 
            if grid[i, j]  == ON:
                if (total < 2) or (total > 3):
                    newGrid[i, j] = OFF
            else:
                if total == 3:
                    newGrid[i, j] = ON
    checkmatrix(grid)
    # update data
    img.set_data(newGrid)
    grid[:] = newGrid[:]
    return img,


#! rob
def checkLifeForm(i,j,lifeForm,grid):
    cols,rows = len(lifeForm),len(lifeForm[0])
    submatrix = grid[i-1:i+cols-1,j-1:j+rows-1]
    try:
        if (submatrix == lifeForm).all():
            grid[i-1:i+cols-1,j-1:j+rows-1] = np.zeros((cols,rows))
            return 1
    except:
        if (submatrix == lifeForm):
            grid[i-1:i+cols-1,j-1:j+rows-1] = np.zeros((cols,rows))
            return 1
    return 0

#! rob
def checkmatrix(grid):
    #contadores o diccionario
    blockCont = 0
    beehiveCont = 0
    blinkerCont = 0
    beaconCont = 0
    boatCont = 0
    gliderCont = 0
    loafCont = 0
    spaceCont = 0
    toadCont = 0
    tubCont = 0
    auxGrid = grid.copy()
    auxGrid = np.pad(auxGrid,1)
    for i in range(len(auxGrid)):
        for j in range(len(auxGrid[i])):
            if(auxGrid[i][j] == ON):
                #sumatorias
                blockCont += checkLifeForm(i,j,block,auxGrid)
                beehiveCont += checkLifeForm(i,j,beehive,auxGrid)
                blinkerCont += checkLifeForm(i,j,blinker,auxGrid)
                beaconCont += checkLifeForm(i,j,beacon1,auxGrid)
                beaconCont += checkLifeForm(i,j,beacon2,auxGrid)
                boatCont += checkLifeForm(i,j,boat,auxGrid)
                gliderCont += checkLifeForm(i,j,glider1,auxGrid)
                gliderCont += checkLifeForm(i,j,glider2,auxGrid)
                gliderCont += checkLifeForm(i,j,glider3,auxGrid)
                gliderCont += checkLifeForm(i,j,glider4,auxGrid)
                loafCont += checkLifeForm(i,j,loaf,auxGrid)
                spaceCont += checkLifeForm(i,j,space1,auxGrid)
                spaceCont += checkLifeForm(i,j,space2,auxGrid)
                spaceCont += checkLifeForm(i,j,space3,auxGrid)
                spaceCont += checkLifeForm(i,j,space4,auxGrid)
                toadCont += checkLifeForm(i,j,toad1,auxGrid)
                toadCont += checkLifeForm(i,j,toad2,auxGrid)
                tubCont += checkLifeForm(i,j,tub,auxGrid)
                
    print("blockCont: ",blockCont)
    print("beehiveCont: ",beehiveCont)
    print("blinkerCont: ",blinkerCont)
    print("beaconCont: ",beaconCont)
    print("boatCont: ",boatCont)
    print("gliderCont: ",gliderCont)
    print("loafCont: ",loafCont)
    print("spaceCont: ",spaceCont)
    print("toadCont: ",toadCont)
    print("tubCont: ",tubCont)
    print("Total:", blockCont+beehiveCont+blinkerCont+beaconCont+boatCont+gliderCont+loafCont+spaceCont+toadCont+tubCont)

# main() function
def main():
    # Command line args are in sys.argv[1], sys.argv[2] ..
    # sys.argv[0] is the script name itself and can be ignored
    # parse arguments
    parser = argparse.ArgumentParser(description="Runs Conway's Game of Life system.py.")
    # TODO: add arguments
    options = [
    {'name': '--grid-size', 'dest': 'N'},
    {'name': '--mov-file', 'dest': 'movfile'},
    {'name': '--interval', 'dest': 'interval'},
    {'name': '--glider', 'action': 'store_true'},
    {'name': '--gosper', 'action': 'store_true'}
]

    for option in options:
        parser.add_argument(option['name'], dest=option.get('dest'), action=option.get('action'), required=False)

    args = parser.parse_args()

    # set grid size
    N = 100
        
    # set animation update interval
    updateInterval = 50

    # declare grid
    grid = np.array([])
    # populate grid with random on/off - more off than on
    grid = randomGrid(N)
    # Uncomment lines to see the "glider" demo
    #grid = np.zeros(N*N).reshape(N, N)
    #addGlider(1, 1, grid)

    # set up animation
    fig, ax = plt.subplots()
    img = ax.imshow(grid, interpolation='nearest')
    ani = animation.FuncAnimation(fig, update, fargs=(img, grid, N, ),
                                  frames = 10,
                                  interval=updateInterval,
                                  save_count=50)

    plt.show()

# call main
if __name__ == '__main__':
    main()
